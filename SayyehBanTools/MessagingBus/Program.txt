using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using SayyehBanTools.MessagingBus.RabbitMQ.Connection;
using SayyehBanTools.MessagingBus.RabbitMQ.SendMessage;

var builder = Host.CreateDefaultBuilder(args);

// تنظیمات RabbitMQ با رمزنگاری
var rabbitMqConnectionSettings = new RabbitMqConnectionSettings
{
    Hostname = "HyyV3VbQHmNeQglHqlhcKQ==",
    Port = "EpPdu9pj1Nus2am5LbmM6w==",
    Username = "r/mhRXOYeJERTka7tzHfwA==",
    Password = "r/mhRXOYeJERTka7tzHfwA==",
    InitVector = "3p2ra5ux5e357t2i",
    PassPhrase = "4l146t34556422ny"
};
builder.ConfigureServices((context, services) =>
{
    services.Configure<RabbitMqConnectionSettings>(options =>
    {
        options.Hostname = rabbitMqConnectionSettings.Hostname;
        options.Port = rabbitMqConnectionSettings.Port;
        options.Username = rabbitMqConnectionSettings.Username;
        options.Password = rabbitMqConnectionSettings.Password;
        options.InitVector = rabbitMqConnectionSettings.InitVector;
        options.PassPhrase = rabbitMqConnectionSettings.PassPhrase;
    });

    // تنظیمات RabbitMQ بدون رمزنگاری
    var rabbitMqConnectionSettingsNormal = new RabbitMqConnectionSettingsNormal
    {
        Hostname = "localhost",
        Port = "5672",
        Username = "guest",
        Password = "guest"
    };
    services.Configure<RabbitMqConnectionSettingsNormal>(options =>
    {
        options.Hostname = rabbitMqConnectionSettingsNormal.Hostname;
        options.Port = rabbitMqConnectionSettingsNormal.Port;
        options.Username = rabbitMqConnectionSettingsNormal.Username;
        options.Password = rabbitMqConnectionSettingsNormal.Password;
    });

    // ثبت سرویس‌ها
    services.AddSingleton<RabbitMQConnection>();
    services.AddSingleton<RabbitMQConnectionNormal>();
    services.AddSingleton<RabbitMQMessageBus>();
    services.AddSingleton<RabbitMQMessageBusNormal>();
});

var host = builder.Build();

// نمونه استفاده
using (var scope = host.Services.CreateScope())
{
    var services = scope.ServiceProvider;
    var messageBus = services.GetRequiredService<RabbitMQMessageBus>();
    var message = new BaseMessage();
    await messageBus.SendMessageAsync(message, exchange: "myExchange", queueName: "myQueue");

    var messageBusNormal = services.GetRequiredService<RabbitMQMessageBusNormal>();
    await messageBusNormal.SendMessageAsync(message, exchange: "myExchange", queueName: "myQueue");
}

await host.RunAsync();